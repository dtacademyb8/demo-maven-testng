

Test Framework - a collection of tools and libraries that are brought together to perform automated testing.

There is no single correct or incorrect way of building a framework but there are general guidelines, design principles and patterns and
should have common characteristics such as scalability, maintainability/reusability, readablity, robust/fast.

In general, the test automation frameworks can be categorized to TDD and BDD frameworks:

TDD(Test-Driven-Development) Framework - based on TestNG.
BDD(Behavior-Driven-Development) Framework - based on Junit and Cucumber


Main components of the TestNG framework:

- Java - write scripts
- Selenium - automate the UI tests
- Maven - automate the build and dependency management process
- TestNG - configure, assert, run the tests
- Faker - generate random test data
- WebDriverManager(bonigarcia) - automate browser driver management

TestNG annotations:

  @Before And @After annotations - >  configuration annotations to perform setup and teardown operations
  before and after specific items during our test execution

  testng.xml -> a file where we configure how to organize and run our tests
  It consists of    suite -> test -> class -> method

  Annotation attribute - optional property that can be applied to an Annotation, comes as key value pair. Each annotation supports pre-defined attributes
    @Test (enabled=true, priority=1)


 Interview Question(IQ):  Given a test suite of 500 test cases, how do you run only 5 test cases?
                          - Use <include> tag in testng.xml file
                          - Ex:
                            <class name="tests.BasicTests">

                                      <methods>
                                          <include name="verifyTitleTest"/>
                                          <include name="verifyURLTest"/>
                                      </methods>

                            </class>

                         IQ: Given a test suite of 500 test cases, how do you run all test cases excluding 5 test cases that are flaky?
                                                   - Use <exclude> tag in testng.xml file
                                                   - Ex:
                                                    <class name="tests2.BasicTests2">

                                                                <methods>
                                                                    <exclude name="testLoginWithValidCredentials"/>
                                                                </methods>

                                                    </class>


            -SDET/QA's are responsible for creating, running, maintaining, of smoke and regression test suites.
            -Smoke Test - test suite that verifies the essential/critical functionalities are working.
            -Regression Test - test suite that verifies if the newly added changes didn't break the existing functionalities, usually involves all of your test cases

            IQ: How can you run all the test cases within all the classes in all the packages?

                -Use regular expression (.*) with <package> tag.
                Ex:
                     <packages>


                         <package name=".*"/>


                     </packages>



            IQ: How can you run all tests cases that starts-with/ends-with/contains a certain String?

               - Use regular expressions within include/exclude tags when indicating the test methods.
               -Ex:
                 <class name="tests.BasicTests">

                           <methods>
                <!--                             ends with Test   -->
                               <include name=".*Test"/>

                <!--                             starts with login    -->
                               <include name="login.*"/>

                <!--                             contains login    -->
                               <include name=".*login.*"/>

                           </methods>

                </class>